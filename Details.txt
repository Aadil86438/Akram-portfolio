ðŸ“„ 1. user.sql

CREATE TABLE IF NOT EXISTS `User` (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(50) NOT NULL,
    MobNo BIGINT UNIQUE NOT NULL,
    Email VARCHAR(50) UNIQUE NOT NULL,
    Status CHAR(1) NOT NULL, -- A=Active, I=Inactive, P=Pending, O=Open, R=Reject, M=Admin

    CreatedBy VARCHAR(50),
    UpdatedBy VARCHAR(50),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


---

ðŸ“„ 2. personal.sql

CREATE TABLE IF NOT EXISTS Personal (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    UID INT NOT NULL,
    FName VARCHAR(50),
    MName VARCHAR(50),
    LName VARCHAR(50),
    Country VARCHAR(30),
    State VARCHAR(20),
    City VARCHAR(20),
    Pincode INT,
    Address VARCHAR(100),
    SelectedSegments VARCHAR(20), -- NSC/BSC/MCX
    FilePath VARCHAR(150),        -- Bank proof / statement file path

    CreatedBy VARCHAR(50),
    UpdatedBy VARCHAR(50),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (UID) REFERENCES `User`(ID)
);


---

ðŸ“„ 3. bank.sql

CREATE TABLE IF NOT EXISTS Bank (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    UID INT NOT NULL,
    IFSC VARCHAR(20),
    AccNo BIGINT,
    
    CreatedBy VARCHAR(50),
    UpdatedBy VARCHAR(50),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (UID) REFERENCES `User`(ID)
);


---

ðŸ“„ 4. session.sql

CREATE TABLE IF NOT EXISTS Session (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    UID INT NOT NULL,
    RequestID VARCHAR(80) NOT NULL,
    ExpireDate BIGINT NOT NULL, -- Unix timestamp

    CreatedBy VARCHAR(50),
    UpdatedBy VARCHAR(50),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (UID) REFERENCES `User`(ID)
);


---

ðŸ“„ 5. transaction.sql

CREATE TABLE IF NOT EXISTS `Transaction` (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    UID INT NOT NULL,
    Amount INT NOT NULL,
    Status CHAR(1) NOT NULL, -- C=Credit, D=Debit

    CreatedBy VARCHAR(50),
    UpdatedBy VARCHAR(50),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (UID) REFERENCES `User`(ID)
);


---

ðŸ“„ 6. share.sql

CREATE TABLE IF NOT EXISTS Share (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    SegmentName CHAR(3) NOT NULL, -- NSC / BSC / MCX
    ShareName VARCHAR(50) NOT NULL,
    SharePrice INT NOT NULL,

    CreatedBy VARCHAR(50),
    UpdatedBy VARCHAR(50),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


---

ðŸ“„ 7. trade.sql

CREATE TABLE IF NOT EXISTS Trade (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    UID INT NOT NULL,
    ShareID INT NOT NULL,
    Status CHAR(1) NOT NULL,
    QAmount INT NOT NULL,
    TradeStatus CHAR(1) NOT NULL, -- H=Hold, S=Sell

    CreatedBy VARCHAR(50),
    UpdatedBy VARCHAR(50),
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (UID) REFERENCES `User`(ID),
    FOREIGN KEY (ShareID) REFERENCES Share(ID)
);


---

ðŸ“Œ How to use in DBeaver

1. Create a new SQL script for each file.


2. Run them in this order:

1. user.sql


2. personal.sql


3. bank.sql


4. session.sql


5. transaction.sql


6. share.sql


7. trade.sql




3. Check in navigator â†’ all 7 tables should appear.




---




-- Insert 1 User (Admin)
INSERT INTO `User` (Name, MobNo, Email, Status, CreatedBy, UpdatedBy)
VALUES ('Admin User', 9876543210, 'admin@test.com', 'M', 'system', 'system');

-- Insert 1 User (Normal Active)
INSERT INTO `User` (Name, MobNo, Email, Status, CreatedBy, UpdatedBy)
VALUES ('Test User', 9123456789, 'user@test.com', 'A', 'system', 'system');

-- Insert into Personal (for Test User)
INSERT INTO Personal (UID, FName, MName, LName, Country, State, City, Pincode, Address, SelectedSegments, FilePath, CreatedBy, UpdatedBy)
VALUES (2, 'Ravi', 'K', 'Sharma', 'India', 'TN', 'Chennai', 600001, 'No.10, MG Road', 'MCX', '/uploads/bank_proof.pdf', 'system', 'system');

-- Insert into Bank (for Test User)
INSERT INTO Bank (UID, IFSC, AccNo, CreatedBy, UpdatedBy)
VALUES (2, 'SBIN0001234', 123456789012, 'system', 'system');

-- Insert into Session (for Test User)
INSERT INTO Session (UID, RequestID, ExpireDate, CreatedBy, UpdatedBy)
VALUES (2, 'abcd1234xyz', 1893456000, 'system', 'system'); -- expire date is future timestamp

-- Insert into Share (some dummy shares)
INSERT INTO Share (SegmentName, ShareName, SharePrice, CreatedBy, UpdatedBy)
VALUES 
('NSC', 'TATA MOTORS', 550, 'system', 'system'),
('BSC', 'RELIANCE', 2500, 'system', 'system'),
('MCX', 'GOLD FUTURE', 62000, 'system', 'system');

-- Insert into Transaction (Add Fund for Test User)
INSERT INTO `Transaction` (UID, Amount, Status, CreatedBy, UpdatedBy)
VALUES (2, 5000, 'C', 'system', 'system'); -- C = Credit

-- Insert into Trade (User buys share)
INSERT INTO Trade (UID, ShareID, Status, QAmount, TradeStatus, CreatedBy, UpdatedBy)
VALUES (2, 1, 'A', 10, 'H', 'system', 'system'); -- H = Hold
