package handlers

import (
	"encoding/json"
	"net/http"

	"final/ftdb"
)

// ✅ Response struct for Admin Dashboard
type AdminResponse struct {
	Success           bool `json:"success"`
	TotalUsers        int  `json:"total_users"`
	ActiveUsers       int  `json:"active_users"`
	PendingUsers      int  `json:"pending_users"`
	TotalTransactions int  `json:"total_transactions"`
}

// ✅ Response struct for Approve/Reject User
type UserResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

// ===================== Admin Dashboard =====================
func AdminDashboard(w http.ResponseWriter, r *http.Request) {
	// ✅ Simple method check
	if r.Method != http.MethodGet {
		w.Write([]byte("Only GET allowed"))
		return
	}

	db := ftdb.GRMMariaFTPRDDB

	// ✅ Variables declared separately
	var totalUsers int
	var activeUsers int
	var pendingUsers int
	var totalTransactions int

	// Count total users
	db.Table("st1006_user").Count(&totalUsers)

	// Count active users
	db.Table("st1006_user").Where("status = ?", "A").Count(&activeUsers)

	// Count pending users
	db.Table("st1006_user").Where("status = ?", "P").Count(&pendingUsers)

	// Count total transactions
	db.Table("st1006_transaction").Count(&totalTransactions)

	// Create response struct
	var resp AdminResponse
	resp.Success = true
	resp.TotalUsers = totalUsers
	resp.ActiveUsers = activeUsers
	resp.PendingUsers = pendingUsers
	resp.TotalTransactions = totalTransactions

	// Convert struct to JSON
	jsonData, err := json.Marshal(resp)
	if err != nil {
		w.Write([]byte("Error generating JSON response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.Write(jsonData)
}

// ===================== Approve User =====================
func ApproveUser(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.Write([]byte("Only POST allowed"))
		return
	}

	uid := r.URL.Query().Get("uid")
	if uid == "" {
		w.Write([]byte("User ID is required"))
		return
	}

	db := ftdb.GRMMariaFTPRDDB
	db.Table("st1006_user").Where("id = ?", uid).Update("status", "A")

	// ✅ Variables declared separately
	var resp UserResponse
	resp.Success = true
	resp.Message = "User Approved"

	// Convert struct to JSON
	jsonData, err := json.Marshal(resp)
	if err != nil {
		w.Write([]byte("Error generating JSON response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.Write(jsonData)
}

// ===================== Reject User =====================
func RejectUser(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		w.Write([]byte("Only POST allowed"))
		return
	}

	uid := r.URL.Query().Get("uid")
	if uid == "" {
		w.Write([]byte("User ID is required"))
		return
	}

	db := ftdb.GRMMariaFTPRDDB
	db.Table("st1006_user").Where("id = ?", uid).Update("status", "R")

	// ✅ Variables declared separately
	var resp UserResponse
	resp.Success = true
	resp.Message = "User Rejected"

	// Convert struct to JSON
	jsonData, err := json.Marshal(resp)
	if err != nil {
		w.Write([]byte("Error generating JSON response"))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.Write(jsonData)
}import axios from "axios";  

const BaseApiCall = axios.create({  
  baseURL: "http://localhost:8080",  
  headers: { "Content-Type": "application/json" },  
  withCredentials: true  
});  

export default {  
  login(data) {  
    return BaseApiCall.post("/login", data);  
  },  
  getDashboard(uid) {  
    return BaseApiCall.get("/dashboard?uid=" + uid);  
  },  
  addFund(data) {  
    return BaseApiCall.post("/add-fund", data);  
  },  
  withdraw(data) {  
    return BaseApiCall.post("/withdraw", data);  
  },  
  validateIFSC(data) {  
    return BaseApiCall.post("/validate-ifsc", data);  
  },  
  getShares() {  
    return BaseApiCall.get("/shares");  
  },  
  buyShare(data) {  
    return BaseApiCall.post("/buy-share", data);  
  },  
  sellShare(data) {  
    return BaseApiCall.post("/sell-share", data);  
  },  
  getCart(uid) {  
    return BaseApiCall.get("/cart?uid=" + uid);  
  },  
  exportCSV() {  
    // direct open in browser for download  
    window.open("http://localhost:8080/export-csv", "_blank");  
  },  
  adminDashboard() {  
    return BaseApiCall.get("/admin-dashboard");  
  },  
  approveUser(uid) {  
    return BaseApiCall.post("/approve-user", { uid: uid });  
  },  
  rejectUser(uid) {  
    return BaseApiCall.post("/reject-user", { uid: uid });  
  }  
};
