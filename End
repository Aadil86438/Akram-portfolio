ðŸ“„ src/main.js

import Vue from "vue";
import App from "./App.vue";
import router from "./router";
import Vuetify from "vuetify";
import "vuetify/dist/vuetify.min.css";

Vue.config.productionTip = false;

Vue.use(Vuetify);

new Vue({
  vuetify: new Vuetify(),
  router,
  render: h => h(App)
}).$mount("#app");


---

ðŸ“„ src/App.vue

<template>
  <v-app>
    <v-main>
      <router-view />
    </v-main>
  </v-app>
</template>

<script>
export default { name: "App" };
</script>


---

ðŸ“„ src/router/index.js

import Vue from "vue";
import Router from "vue-router";

import LoginView from "../views/LoginView.vue";
import DashboardView from "../views/DashboardView.vue";
import BankView from "../views/BankView.vue";
import TradingView from "../views/TradingView.vue";
import CartView from "../views/CartView.vue";
import AdminView from "../views/AdminView.vue";
import UsersView from "../views/UsersView.vue";
import AddFund from "../components/AddFund.vue";
import Withdraw from "../components/Withdraw.vue";

Vue.use(Router);

export default new Router({
  routes: [
    { path: "/", component: LoginView },
    { path: "/dashboard", component: DashboardView },
    { path: "/bank", component: BankView },
    { path: "/trading", component: TradingView },
    { path: "/cart", component: CartView },
    { path: "/admin", component: AdminView },
    { path: "/users", component: UsersView },
    { path: "/add-fund", component: AddFund },
    { path: "/withdraw", component: Withdraw }
  ]
});


---

ðŸ“„ src/services/EventService.js

import axios from "axios";

const apiClient = axios.create({
  baseURL: "http://localhost:8080",
  headers: { "Content-Type": "application/json" },
  withCredentials: true
});

export default {
  login(data) {
    return apiClient.post("/login", data);
  },
  getDashboard(uid) {
    return apiClient.get("/dashboard?uid=" + uid);
  },
  addFund(data) {
    return apiClient.post("/add-fund", data);
  },
  withdraw(data) {
    return apiClient.post("/withdraw", data);
  },
  validateIFSC(data) {
    return apiClient.post("/validate-ifsc", data);
  },
  getShares() {
    return apiClient.get("/shares");
  },
  buyShare(data) {
    return apiClient.post("/buy-share", data);
  },
  sellShare(data) {
    return apiClient.post("/sell-share", data);
  },
  getCart(uid) {
    return apiClient.get("/cart?uid=" + uid);
  },
  exportCSV() {
    // direct open in browser for download
    window.open("http://localhost:8080/export-csv", "_blank");
  },
  adminDashboard() {
    return apiClient.get("/admin-dashboard");
  },
  approveUser(uid) {
    return apiClient.post("/approve-user", { uid: uid });
  },
  rejectUser(uid) {
    return apiClient.post("/reject-user", { uid: uid });
  }
};


---

ðŸ“‚ Components


---

ðŸ“„ src/components/LoginForm.vue

<template>
  <v-container>
    <v-form @submit.prevent="doLogin">
      <v-text-field v-model="username" label="Username"></v-text-field>
      <v-text-field v-model="password" type="password" label="Password"></v-text-field>
      <v-btn type="submit" color="primary">Login</v-btn>
      <p>{{ message }}</p>
    </v-form>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { username: "", password: "", message: "" };
  },
  methods: {
    doLogin() {
      EventService.login({ username: this.username, password: this.password })
        .then(res => {
          if (res.data.success) {
            this.$router.push("/dashboard");
          } else {
            this.message = res.data.error;
          }
        })
        .catch(() => (this.message = "Login failed"));
    }
  }
};
</script>


---

ðŸ“„ src/components/Dashboard.vue

<template>
  <v-container>
    <v-card>
      <v-card-title>Dashboard</v-card-title>
      <v-card-text>
        <p><strong>Balance:</strong> {{ balance }}</p>
        <p><strong>Invested:</strong> {{ invested }}</p>
      </v-card-text>
      <v-card-actions>
        <v-btn color="green" @click="$router.push('/add-fund')">Add Fund</v-btn>
        <v-btn color="red" @click="$router.push('/withdraw')">Withdraw</v-btn>
        <v-btn color="blue" @click="$router.push('/bank')">Bank Info</v-btn>
        <v-btn color="orange" @click="$router.push('/trading')">Trading</v-btn>
        <v-btn color="teal" @click="$router.push('/cart')">My Cart</v-btn>
        <v-btn color="purple" @click="downloadCSV">Download CSV</v-btn>
      </v-card-actions>
    </v-card>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { balance: 0, invested: 0 };
  },
  mounted() {
    EventService.getDashboard(1) // example user id = 1
      .then(res => {
        this.balance = res.data.balance;
        this.invested = res.data.invested_amount;
      })
      .catch(() => {});
  },
  methods: {
    downloadCSV() {
      EventService.exportCSV();
    }
  }
};
</script>


---

ðŸ“„ src/components/AddFund.vue

<template>
  <v-container>
    <v-form @submit.prevent="doAdd">
      <v-text-field v-model="amount" label="Amount" type="number"></v-text-field>
      <v-btn type="submit" color="green">Add Fund</v-btn>
      <p>{{ message }}</p>
    </v-form>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { amount: 0, message: "" };
  },
  methods: {
    doAdd() {
      EventService.addFund({ uid: 1, amount: Number(this.amount) })
        .then(res => (this.message = res.data.message))
        .catch(() => (this.message = "Error adding fund"));
    }
  }
};
</script>


---

ðŸ“„ src/components/Withdraw.vue

<template>
  <v-container>
    <v-form @submit.prevent="doWithdraw">
      <v-text-field v-model="amount" label="Withdraw Amount" type="number"></v-text-field>
      <v-btn type="submit" color="red">Withdraw</v-btn>
      <p>{{ message }}</p>
    </v-form>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { amount: 0, message: "" };
  },
  methods: {
    doWithdraw() {
      EventService.withdraw({ uid: 1, amount: Number(this.amount) })
        .then(res => (this.message = res.data.message))
        .catch(() => (this.message = "Error withdrawing"));
    }
  }
};
</script>


---

ðŸ“„ src/components/BankForm.vue

<template>
  <v-container>
    <v-form @submit.prevent="saveBank">
      <v-text-field v-model="ifsc" label="IFSC"></v-text-field>
      <v-text-field v-model="accNo" label="Account No" type="number"></v-text-field>

      <v-checkbox-group v-model="segments" row>
        <v-checkbox label="NSE" value="NSE"></v-checkbox>
        <v-checkbox label="BSE" value="BSE"></v-checkbox>
        <v-checkbox label="MCX" value="MCX"></v-checkbox>
      </v-checkbox-group>

      <v-file-input v-model="file" label="Upload Proof"></v-file-input>

      <v-btn type="submit" color="blue">Save Bank Info</v-btn>
      <p>{{ message }}</p>
    </v-form>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { ifsc: "", accNo: "", segments: [], file: null, message: "" };
  },
  methods: {
    saveBank() {
      EventService.validateIFSC({
        uid: 1,
        ifsc: this.ifsc,
        acc_no: Number(this.accNo),
        selected_segments: this.segments.join(","),
        file_path: this.file ? this.file.name : ""
      })
        .then(res => {
          this.message = res.data.success
            ? "Bank saved: " + res.data.bank + " - " + res.data.branch
            : res.data.error;
        })
        .catch(() => (this.message = "Error saving bank info"));
    }
  }
};
</script>


---

ðŸ“„ src/components/Shares.vue

<template>
  <v-container>
    <v-card>
      <v-card-title>Shares</v-card-title>
      <v-data-table :headers="headers" :items="shares">
        <template v-slot:item.actions="{ item }">
          <v-btn small color="green" @click="buy(item.id)">Buy</v-btn>
        </template>
      </v-data-table>
      <p>{{ message }}</p>
    </v-card>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return {
      shares: [],
      message: "",
      headers: [
        { text: "ID", value: "id" },
        { text: "Name", value: "share_name" },
        { text: "Price", value: "share_price" },
        { text: "Actions", value: "actions", sortable: false }
      ]
    };
  },
  mounted() {
    EventService.getShares()
      .then(res => (this.shares = res.data))
      .catch(() => {});
  },
  methods: {
    buy(shareId) {
      EventService.buyShare({ uid: 1, share_id: shareId, qamount: 1 })
        .then(res => (this.message = res.data.message))
        .catch(() => (this.message = "Buy failed"));
    }
  }
};
</script>


---

ðŸ“„ src/components/MyCart.vue

<template>
  <v-container>
    <v-card>
      <v-card-title>My Cart</v-card-title>
      <v-data-table :headers="headers" :items="cart">
        <template v-slot:item.actions="{ item }">
          <v-btn small color="red" @click="sell(item.share_id)">Sell</v-btn>
        </template>
      </v-data-table>
      <p>{{ message }}</p>
    </v-card>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return {
      cart: [],
      message: "",
      headers: [
        { text: "Share ID", value: "share_id" },
        { text: "Quantity", value: "qamount" },
        { text: "Status", value: "trade_status" },
        { text: "Actions", value: "actions", sortable: false }
      ]
    };
  },
  mounted() {
    EventService.getCart(1)
      .then(res => (this.cart = res.data))
      .catch(() => {});
  },
  methods: {
    sell(shareId) {
      EventService.sellShare({ uid: 1, share_id: shareId, qamount: 1 })
        .then(res => (this.message = res.data.message))
        .catch(() => (this.message = "Sell failed"));
    }
  }
};
</script>


---

ðŸ“„ src/components/AdminDashboard.vue

<template>
  <v-container>
    <v-card>
      <v-card-title>Admin Dashboard</v-card-title>
      <v-card-text>
        <p>Total Users: {{ stats.total_users }}</p>
        <p>Active Users: {{ stats.active_users }}</p>
        <p>Pending Users: {{ stats.pending_users }}</p>
        <p>Total Transactions: {{ stats.total_transactions }}</p>
      </v-card-text>
      <v-card-actions>
        <v-btn color="primary" @click="$router.push('/users')">Manage Users</v-btn>
      </v-card-actions>
    </v-card>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return {
      stats: { total_users: 0, active_users: 0, pending_users: 0, total_transactions: 0 }
    };
  },
  mounted() {
    EventService.adminDashboard()
      .then(res => (this.stats = res.data))
      .catch(() => {});
  }
};
</script>


---

ðŸ“„ src/components/UserManagement.vue

<template>
  <v-container>
    <v-card>
      <v-card-title>User Management</v-card-title>
      <v-text-field v-model="uid" label="User ID"></v-text-field>
      <v-btn small color="green" @click="approve">Approve</v-btn>
      <v-btn small color="red" @click="reject">Reject</v-btn>
      <p>{{ message }}</p>
    </v-card>
  </v-container>
</template>

<script>
import EventService from "../services/EventService";

export default {
  data() {
    return { uid: "", message: "" };
  },
  methods: {
    approve() {
      EventService.approveUser(this.uid)
        .then(res => (this.message = res.data.message))
        .catch(() => (this.message = "Approve failed"));
    },
    reject() {
      EventService.rejectUser(this.uid)
        .then(res => (this.message = res.data.message))
        .catch(() => (this.message = "Reject failed"));
    }
  }
};
</script>


---
